syntax = "proto3";
package terra.msgauth.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "terra/msgauth/v1beta1/msgauth.proto";

option go_package = "github.com/terra-project/core/x/msgauth/types";

// Query defines the gRPC querier service.
service Query {
  // Grants returns grants between a granter and a grantee
  rpc Grants(QueryGrantsRequest) returns (QueryGrantsResponse) {
    option (google.api.http).get = "/terra/msgauth/v1beta1/granters/{granter}/grantees/{grantee}/grants";
  }

  // AllGrants returns all grants of a granter
  rpc AllGrants(QueryAllGrantsRequest) returns (QueryAllGrantsResponse) {
    option (google.api.http).get = "/terra/market/v1beta1/granters/{granter}/grants";
  }
}

// QueryGrantsRequest is the request type for the Query/Grants RPC method.
message QueryGrantsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string granter = 1;
  string grantee = 2;
}

// QueryGrantsResponse is the response type for the Query/Grants RPC method.
message QueryGrantsResponse {
  repeated AuthorizationGrant grants = 1 [(gogoproto.nullable) = false];
}

// QueryAllGrantsRequest is the request type for the Query/AllGrants RPC method.
message QueryAllGrantsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string granter = 1;
}

// QueryAllGrantsResponse is the response type for the Query/AllGrants RPC method.
message QueryAllGrantsResponse {
  repeated AuthorizationGrant grants = 1 [(gogoproto.nullable) = false];
}
