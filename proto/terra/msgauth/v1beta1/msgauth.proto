syntax = "proto3";
package terra.msgauth.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/terra-project/core/x/msgauth/types";

// AuthorizationGrant represent the stored grant instance in the keeper store
message AuthorizationGrant {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = true;
  option (gogoproto.goproto_getters)  = false;

  google.protobuf.Any authorization = 1
      [(gogoproto.moretags) = "yaml:\"authorization\"", (cosmos_proto.accepts_interface) = "AuthorizationI"];
  google.protobuf.Timestamp expiration = 2
      [(gogoproto.moretags) = "yaml:\"expiration\"", (gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// GenericAuthorization grants the permission to execute any transaction of the provided
// msg type without restrictions
message GenericAuthorization {
  option (gogoproto.equal)                   = true;
  option (gogoproto.goproto_stringer)        = true;
  option (cosmos_proto.implements_interface) = "AuthorizationI";

  // GrantMsgType is the type of Msg this capability grant allows
  string grant_msg_type = 1 [(gogoproto.moretags) = "yaml:\"grant_msg_type\""];
}

// SendAuthorization grants the permission to execute send transaction of the provided
// msg type with spend limit
message SendAuthorization {
  option (gogoproto.equal)                   = true;
  option (gogoproto.goproto_stringer)        = true;
  option (cosmos_proto.implements_interface) = "AuthorizationI";

  // SpendLimit specifies the maximum amount of tokens that can be spent
  // by this authorization and will be updated as tokens are spent. If it is
  // empty, there is no spend limit and any amount of coins can be spent.
  repeated cosmos.base.v1beta1.Coin spend_limit = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// GGMPair is struct that just has a granter-grantee-msgtype pair with no other data.
// It is intended to be used as a marshalable pointer. For example, a GGPair can be used to construct the
// key to getting an Grant from state.
message GGMPair {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = true;

  string granter_address = 1 [(gogoproto.moretags) = "yaml:\"granter_address\""];
  string grantee_address = 2 [(gogoproto.moretags) = "yaml:\"grantee_address\""];
  string msg_type        = 3 [(gogoproto.moretags) = "yaml:\"msg_type\""];
}

// GGMPairs is the array of GGMPair
message GGMPairs {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = true;

  repeated GGMPair pairs = 1 [(gogoproto.moretags) = "yaml:\"pairs\"", (gogoproto.nullable) = false];
}