// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terra/vesting/v1beta1/vesting.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/auth/vesting/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LazyGradedVestingAccount implements the LazyGradedVestingAccount interface. It vests all
// coins according to a predefined schedule.
type LazyGradedVestingAccount struct {
	*types.BaseVestingAccount `protobuf:"bytes,1,opt,name=base_vesting_account,json=baseVestingAccount,proto3,embedded=base_vesting_account" json:"base_vesting_account,omitempty"`
	VestingSchedules          VestingSchedules `protobuf:"bytes,2,rep,name=vesting_schedules,json=vestingSchedules,proto3,castrepeated=VestingSchedules" json:"vesting_schedules" yaml:"vesting_schedules"`
}

func (m *LazyGradedVestingAccount) Reset()      { *m = LazyGradedVestingAccount{} }
func (*LazyGradedVestingAccount) ProtoMessage() {}
func (*LazyGradedVestingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a9bc06e563192a, []int{0}
}
func (m *LazyGradedVestingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LazyGradedVestingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LazyGradedVestingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LazyGradedVestingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazyGradedVestingAccount.Merge(m, src)
}
func (m *LazyGradedVestingAccount) XXX_Size() int {
	return m.Size()
}
func (m *LazyGradedVestingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_LazyGradedVestingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_LazyGradedVestingAccount proto.InternalMessageInfo

// Schedule - represent single schedule data for a vesting schedule
type Schedule struct {
	StartTime int64                                  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" yaml:"start_time"`
	EndTime   int64                                  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" yaml:"end_time"`
	Ratio     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio" yaml:"ratio"`
}

func (m *Schedule) Reset()         { *m = Schedule{} }
func (m *Schedule) String() string { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()    {}
func (*Schedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a9bc06e563192a, []int{1}
}
func (m *Schedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Schedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schedule.Merge(m, src)
}
func (m *Schedule) XXX_Size() int {
	return m.Size()
}
func (m *Schedule) XXX_DiscardUnknown() {
	xxx_messageInfo_Schedule.DiscardUnknown(m)
}

var xxx_messageInfo_Schedule proto.InternalMessageInfo

// VestingSchedule defines vesting schedule for a denom
type VestingSchedule struct {
	Denom     string    `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"start_time"`
	Schedules Schedules `protobuf:"bytes,2,rep,name=schedules,proto3,castrepeated=Schedules" json:"schedules" yaml:"schedules"`
}

func (m *VestingSchedule) Reset()         { *m = VestingSchedule{} }
func (m *VestingSchedule) String() string { return proto.CompactTextString(m) }
func (*VestingSchedule) ProtoMessage()    {}
func (*VestingSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a9bc06e563192a, []int{2}
}
func (m *VestingSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingSchedule.Merge(m, src)
}
func (m *VestingSchedule) XXX_Size() int {
	return m.Size()
}
func (m *VestingSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_VestingSchedule proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LazyGradedVestingAccount)(nil), "terra.vesting.v1beta1.LazyGradedVestingAccount")
	proto.RegisterType((*Schedule)(nil), "terra.vesting.v1beta1.Schedule")
	proto.RegisterType((*VestingSchedule)(nil), "terra.vesting.v1beta1.VestingSchedule")
}

func init() {
	proto.RegisterFile("terra/vesting/v1beta1/vesting.proto", fileDescriptor_c4a9bc06e563192a)
}

var fileDescriptor_c4a9bc06e563192a = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0x7d, 0x49, 0xfb, 0xff, 0xc7, 0x57, 0xa4, 0xa6, 0xa6, 0x95, 0xac, 0x0e, 0xbe, 0xc8,
	0x40, 0x15, 0x81, 0x72, 0x56, 0x4b, 0xa7, 0x0c, 0x48, 0x58, 0x48, 0x5d, 0x98, 0x4c, 0xc5, 0xc0,
	0x12, 0x9d, 0xed, 0x57, 0xa9, 0xa1, 0xf6, 0x45, 0xbe, 0x4b, 0x44, 0xf8, 0x04, 0xb0, 0x31, 0x30,
	0x30, 0x76, 0xee, 0x27, 0xe9, 0xc0, 0x90, 0x11, 0x31, 0x18, 0x94, 0x7c, 0x83, 0x7c, 0x02, 0x94,
	0x3b, 0xbb, 0x29, 0x2e, 0x65, 0xb2, 0xef, 0x7d, 0x9f, 0xf7, 0x77, 0xf7, 0xdc, 0x73, 0xf8, 0x81,
	0x84, 0x3c, 0x67, 0xde, 0x04, 0x84, 0x4c, 0xb2, 0xa1, 0x37, 0x39, 0x0c, 0x41, 0xb2, 0xc3, 0x6a,
	0x4d, 0x47, 0x39, 0x97, 0xdc, 0xda, 0x53, 0x22, 0x5a, 0x15, 0x4b, 0xd1, 0xfe, 0xee, 0x90, 0x0f,
	0xb9, 0x52, 0x78, 0xab, 0x3f, 0x2d, 0xde, 0x7f, 0x18, 0x71, 0x91, 0x72, 0xf1, 0x6f, 0xa4, 0xfb,
	0xa5, 0x81, 0xed, 0x97, 0xec, 0xc3, 0xf4, 0x24, 0x67, 0x31, 0xc4, 0xaf, 0x75, 0xef, 0x79, 0x14,
	0xf1, 0x71, 0x26, 0xad, 0x10, 0xef, 0x86, 0x4c, 0xc0, 0xa0, 0x1c, 0x19, 0x30, 0x5d, 0xb7, 0x51,
	0x07, 0x75, 0xb7, 0x8e, 0x1e, 0x53, 0xbd, 0x43, 0xfd, 0x3c, 0xd4, 0x67, 0x02, 0xfe, 0x24, 0xf9,
	0x1b, 0xb3, 0x82, 0xa0, 0xc0, 0x0a, 0x6f, 0x75, 0xac, 0x4f, 0x08, 0xef, 0x54, 0x7c, 0x11, 0x9d,
	0x41, 0x3c, 0x3e, 0x07, 0x61, 0x37, 0x3a, 0xcd, 0xee, 0xd6, 0xd1, 0x01, 0xfd, 0xab, 0x61, 0x5a,
	0x22, 0x5e, 0x95, 0x72, 0xff, 0xf8, 0xaa, 0x20, 0xc6, 0xb2, 0x20, 0xf6, 0x94, 0xa5, 0xe7, 0x7d,
	0xf7, 0x16, 0xce, 0xbd, 0xfc, 0x49, 0xda, 0xb5, 0x21, 0x11, 0xb4, 0x27, 0xb5, 0x4a, 0xbf, 0xf5,
	0xf1, 0x82, 0x18, 0x5f, 0x2f, 0x88, 0xe1, 0x7e, 0x43, 0xb8, 0x55, 0xd5, 0xad, 0x63, 0x8c, 0x85,
	0x64, 0xb9, 0x1c, 0xc8, 0x24, 0x05, 0x65, 0xbe, 0xe9, 0xef, 0x2d, 0x0b, 0xb2, 0xa3, 0xb7, 0x5b,
	0xf7, 0xdc, 0xc0, 0x54, 0x8b, 0xd3, 0x24, 0x05, 0x8b, 0xe2, 0x16, 0x64, 0xb1, 0x9e, 0x69, 0xa8,
	0x99, 0xfb, 0xcb, 0x82, 0x6c, 0xeb, 0x99, 0xaa, 0xe3, 0x06, 0xff, 0x43, 0x16, 0x2b, 0xfd, 0x29,
	0xde, 0xcc, 0x99, 0x4c, 0xb8, 0xdd, 0xec, 0xa0, 0xae, 0xe9, 0x3f, 0x5b, 0x79, 0xfa, 0x51, 0x90,
	0x83, 0x61, 0x22, 0xcf, 0xc6, 0x21, 0x8d, 0x78, 0xea, 0x95, 0x89, 0xea, 0x4f, 0x4f, 0xc4, 0xef,
	0x3c, 0x39, 0x1d, 0x81, 0xa0, 0x2f, 0x20, 0x5a, 0x16, 0xe4, 0x9e, 0x46, 0x2b, 0x88, 0x1b, 0x68,
	0x58, 0x7f, 0x63, 0x65, 0xc9, 0xbd, 0x44, 0x78, 0xbb, 0xe6, 0xdf, 0x7a, 0x82, 0x37, 0x63, 0xc8,
	0x78, 0xaa, 0x0c, 0x99, 0x77, 0x19, 0xd2, 0x1a, 0x2b, 0xc6, 0x66, 0x3d, 0x1c, 0x72, 0x47, 0x38,
	0xd7, 0xa9, 0x3c, 0x2a, 0x53, 0x69, 0x97, 0xd4, 0x9b, 0x69, 0x98, 0xeb, 0x18, 0xd6, 0x60, 0x7d,
	0x58, 0xff, 0xe4, 0x6a, 0xee, 0xa0, 0xd9, 0xdc, 0x41, 0xbf, 0xe6, 0x0e, 0xfa, 0xbc, 0x70, 0x8c,
	0xd9, 0xc2, 0x31, 0xbe, 0x2f, 0x1c, 0xe3, 0x4d, 0xef, 0xc6, 0x5d, 0xa8, 0xcd, 0x7b, 0xa3, 0x9c,
	0xbf, 0x85, 0x48, 0x7a, 0x11, 0xcf, 0xc1, 0x7b, 0x7f, 0xfd, 0xd6, 0xd5, 0xb5, 0x84, 0xff, 0xa9,
	0x27, 0xfe, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xe2, 0xff, 0x70, 0x5c, 0x03, 0x00,
	0x00,
}

func (m *LazyGradedVestingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LazyGradedVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LazyGradedVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingSchedules) > 0 {
		for iNdEx := len(m.VestingSchedules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingSchedules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVesting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseVestingAccount != nil {
		{
			size, err := m.BaseVestingAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVesting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Schedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Schedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVesting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.EndTime != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VestingSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schedules) > 0 {
		for iNdEx := len(m.Schedules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schedules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVesting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintVesting(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVesting(dAtA []byte, offset int, v uint64) int {
	offset -= sovVesting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LazyGradedVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseVestingAccount != nil {
		l = m.BaseVestingAccount.Size()
		n += 1 + l + sovVesting(uint64(l))
	}
	if len(m.VestingSchedules) > 0 {
		for _, e := range m.VestingSchedules {
			l = e.Size()
			n += 1 + l + sovVesting(uint64(l))
		}
	}
	return n
}

func (m *Schedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovVesting(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovVesting(uint64(m.EndTime))
	}
	l = m.Ratio.Size()
	n += 1 + l + sovVesting(uint64(l))
	return n
}

func (m *VestingSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovVesting(uint64(l))
	}
	if len(m.Schedules) > 0 {
		for _, e := range m.Schedules {
			l = e.Size()
			n += 1 + l + sovVesting(uint64(l))
		}
	}
	return n
}

func sovVesting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVesting(x uint64) (n int) {
	return sovVesting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LazyGradedVestingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LazyGradedVestingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LazyGradedVestingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseVestingAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseVestingAccount == nil {
				m.BaseVestingAccount = &types.BaseVestingAccount{}
			}
			if err := m.BaseVestingAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingSchedules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingSchedules = append(m.VestingSchedules, VestingSchedule{})
			if err := m.VestingSchedules[len(m.VestingSchedules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Schedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schedules = append(m.Schedules, Schedule{})
			if err := m.Schedules[len(m.Schedules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVesting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVesting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVesting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVesting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVesting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVesting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVesting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVesting = fmt.Errorf("proto: unexpected end of group")
)
