// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terra/msgauth/v1beta1/msgauth.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuthorizationGrant represent the stored grant instance in the keeper store
type AuthorizationGrant struct {
	Authorization *types.Any `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty" yaml:"authorization"`
	Expiration    time.Time  `protobuf:"bytes,2,opt,name=expiration,proto3,stdtime" json:"expiration" yaml:"expiration"`
}

func (m *AuthorizationGrant) Reset()         { *m = AuthorizationGrant{} }
func (m *AuthorizationGrant) String() string { return proto.CompactTextString(m) }
func (*AuthorizationGrant) ProtoMessage()    {}
func (*AuthorizationGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4fb7284372739ab, []int{0}
}
func (m *AuthorizationGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizationGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizationGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizationGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationGrant.Merge(m, src)
}
func (m *AuthorizationGrant) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizationGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationGrant.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationGrant proto.InternalMessageInfo

// GenericAuthorization grants the permission to execute any transaction of the provided
// msg type without restrictions
type GenericAuthorization struct {
	// GrantMsgType is the type of Msg this capability grant allows
	GrantMsgType string `protobuf:"bytes,1,opt,name=grant_msg_type,json=grantMsgType,proto3" json:"grant_msg_type,omitempty" yaml:"grant_msg_type"`
}

func (m *GenericAuthorization) Reset()         { *m = GenericAuthorization{} }
func (m *GenericAuthorization) String() string { return proto.CompactTextString(m) }
func (*GenericAuthorization) ProtoMessage()    {}
func (*GenericAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4fb7284372739ab, []int{1}
}
func (m *GenericAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenericAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenericAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericAuthorization.Merge(m, src)
}
func (m *GenericAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *GenericAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_GenericAuthorization proto.InternalMessageInfo

func (m *GenericAuthorization) GetGrantMsgType() string {
	if m != nil {
		return m.GrantMsgType
	}
	return ""
}

// SendAuthorization grants the permission to execute send transaction of the provided
// msg type with spend limit
type SendAuthorization struct {
	// SpendLimit specifies the maximum amount of tokens that can be spent
	// by this authorization and will be updated as tokens are spent. If it is
	// empty, there is no spend limit and any amount of coins can be spent.
	SpendLimit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=spend_limit,json=spendLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"spend_limit"`
}

func (m *SendAuthorization) Reset()         { *m = SendAuthorization{} }
func (m *SendAuthorization) String() string { return proto.CompactTextString(m) }
func (*SendAuthorization) ProtoMessage()    {}
func (*SendAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4fb7284372739ab, []int{2}
}
func (m *SendAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendAuthorization.Merge(m, src)
}
func (m *SendAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *SendAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_SendAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_SendAuthorization proto.InternalMessageInfo

func (m *SendAuthorization) GetSpendLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.SpendLimit
	}
	return nil
}

// GGMPair is struct that just has a granter-grantee-msgtype pair with no other data.
// It is intended to be used as a marshalable pointer. For example, a GGPair can be used to construct the
// key to getting an Grant from state.
type GGMPair struct {
	GranterAddress string `protobuf:"bytes,1,opt,name=granter_address,json=granterAddress,proto3" json:"granter_address,omitempty" yaml:"granter_address"`
	GranteeAddress string `protobuf:"bytes,2,opt,name=grantee_address,json=granteeAddress,proto3" json:"grantee_address,omitempty" yaml:"grantee_address"`
	MsgType        string `protobuf:"bytes,3,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty" yaml:"msg_type"`
}

func (m *GGMPair) Reset()         { *m = GGMPair{} }
func (m *GGMPair) String() string { return proto.CompactTextString(m) }
func (*GGMPair) ProtoMessage()    {}
func (*GGMPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4fb7284372739ab, []int{3}
}
func (m *GGMPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GGMPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GGMPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GGMPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GGMPair.Merge(m, src)
}
func (m *GGMPair) XXX_Size() int {
	return m.Size()
}
func (m *GGMPair) XXX_DiscardUnknown() {
	xxx_messageInfo_GGMPair.DiscardUnknown(m)
}

var xxx_messageInfo_GGMPair proto.InternalMessageInfo

func (m *GGMPair) GetGranterAddress() string {
	if m != nil {
		return m.GranterAddress
	}
	return ""
}

func (m *GGMPair) GetGranteeAddress() string {
	if m != nil {
		return m.GranteeAddress
	}
	return ""
}

func (m *GGMPair) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

// GGMPairs is the array of GGMPair
type GGMPairs struct {
	Pairs []GGMPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs" yaml:"pairs"`
}

func (m *GGMPairs) Reset()         { *m = GGMPairs{} }
func (m *GGMPairs) String() string { return proto.CompactTextString(m) }
func (*GGMPairs) ProtoMessage()    {}
func (*GGMPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4fb7284372739ab, []int{4}
}
func (m *GGMPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GGMPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GGMPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GGMPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GGMPairs.Merge(m, src)
}
func (m *GGMPairs) XXX_Size() int {
	return m.Size()
}
func (m *GGMPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_GGMPairs.DiscardUnknown(m)
}

var xxx_messageInfo_GGMPairs proto.InternalMessageInfo

func (m *GGMPairs) GetPairs() []GGMPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthorizationGrant)(nil), "terra.msgauth.v1beta1.AuthorizationGrant")
	proto.RegisterType((*GenericAuthorization)(nil), "terra.msgauth.v1beta1.GenericAuthorization")
	proto.RegisterType((*SendAuthorization)(nil), "terra.msgauth.v1beta1.SendAuthorization")
	proto.RegisterType((*GGMPair)(nil), "terra.msgauth.v1beta1.GGMPair")
	proto.RegisterType((*GGMPairs)(nil), "terra.msgauth.v1beta1.GGMPairs")
}

func init() {
	proto.RegisterFile("terra/msgauth/v1beta1/msgauth.proto", fileDescriptor_e4fb7284372739ab)
}

var fileDescriptor_e4fb7284372739ab = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0xce, 0xb5, 0xfa, 0xfd, 0x5a, 0xae, 0x25, 0x55, 0x4d, 0x8a, 0x9a, 0x48, 0xf8, 0x2a, 0xb3,
	0x44, 0x48, 0xb1, 0x69, 0xd9, 0xb2, 0xa0, 0xb8, 0x43, 0x04, 0xa2, 0x12, 0x32, 0x5d, 0x60, 0x09,
	0x17, 0xe7, 0xea, 0x18, 0x62, 0x9f, 0x75, 0x77, 0x41, 0x0d, 0x7f, 0x01, 0x63, 0x47, 0x16, 0xa4,
	0xcc, 0xcc, 0xfc, 0x11, 0x15, 0x12, 0x52, 0xc5, 0xc4, 0xe4, 0xa2, 0x44, 0x48, 0xcc, 0xf9, 0x0b,
	0x90, 0xef, 0xce, 0x49, 0x4c, 0x2a, 0xa6, 0xdc, 0xbd, 0xf7, 0xbd, 0xef, 0x7b, 0xef, 0x7d, 0x17,
	0xc3, 0xfb, 0x82, 0x30, 0x86, 0x9d, 0x88, 0x07, 0x78, 0x28, 0xfa, 0xce, 0xbb, 0xc3, 0x2e, 0x11,
	0xf8, 0x30, 0xbf, 0xdb, 0x09, 0xa3, 0x82, 0x1a, 0x7b, 0x12, 0x64, 0xe7, 0x41, 0x0d, 0xaa, 0x55,
	0x02, 0x1a, 0x50, 0x89, 0x70, 0xb2, 0x93, 0x02, 0xd7, 0x50, 0x40, 0x69, 0x30, 0x20, 0x8e, 0xbc,
	0x75, 0x87, 0x67, 0x8e, 0x08, 0x23, 0xc2, 0x05, 0x8e, 0x12, 0x0d, 0xa8, 0xfe, 0x0d, 0xc0, 0xf1,
	0x28, 0x4f, 0xf9, 0x94, 0x47, 0x94, 0x77, 0x14, 0xa9, 0xba, 0xe8, 0x94, 0xa9, 0x6e, 0x4e, 0x17,
	0x73, 0x32, 0x6f, 0xd3, 0xa7, 0x61, 0xac, 0xf2, 0xd6, 0x2f, 0x00, 0x8d, 0xd6, 0x50, 0xf4, 0x29,
	0x0b, 0xdf, 0x63, 0x11, 0xd2, 0xb8, 0xcd, 0x70, 0x2c, 0x8c, 0x33, 0x78, 0x1b, 0x2f, 0x47, 0xf7,
	0xc1, 0x01, 0xa8, 0x6f, 0x1d, 0x55, 0x6c, 0xd5, 0x84, 0x9d, 0x37, 0x61, 0xb7, 0xe2, 0x91, 0xfb,
	0x60, 0x96, 0xa2, 0xca, 0x08, 0x47, 0x83, 0xa6, 0x55, 0x28, 0xb2, 0xbe, 0x7e, 0x69, 0x94, 0x0b,
	0xe4, 0x4f, 0xbc, 0x22, 0xad, 0xf1, 0x12, 0x42, 0x72, 0x9e, 0x84, 0x4c, 0x89, 0xac, 0x49, 0x91,
	0xda, 0x8a, 0xc8, 0x69, 0xbe, 0x0a, 0xf7, 0xde, 0x65, 0x8a, 0x4a, 0xb3, 0x14, 0xed, 0x2a, 0xb9,
	0x45, 0xad, 0x75, 0x71, 0x8d, 0x80, 0xb7, 0x44, 0xd6, 0xdc, 0xfe, 0x30, 0x46, 0xa5, 0x8f, 0x63,
	0x04, 0x7e, 0x8f, 0x11, 0xb0, 0x38, 0xac, 0xb4, 0x49, 0x4c, 0x58, 0xe8, 0x17, 0x1a, 0x32, 0x1e,
	0xc3, 0x72, 0x90, 0x4d, 0xdc, 0x89, 0x78, 0xd0, 0x11, 0xa3, 0x84, 0xc8, 0x49, 0x6f, 0xb9, 0xd5,
	0x59, 0x8a, 0xf6, 0x94, 0x48, 0x31, 0x6f, 0x79, 0xdb, 0x32, 0x70, 0xc2, 0x83, 0xd3, 0x51, 0x42,
	0x9a, 0xb5, 0x5c, 0xe2, 0xfb, 0xca, 0xb0, 0xd6, 0x27, 0x00, 0x77, 0x5f, 0x90, 0xb8, 0x57, 0x94,
	0x1c, 0xc0, 0x2d, 0x9e, 0x90, 0xb8, 0xd7, 0x19, 0x84, 0x51, 0x28, 0xf6, 0xc1, 0xc1, 0x7a, 0x7d,
	0xeb, 0xa8, 0x6a, 0x6b, 0xdb, 0x32, 0xa3, 0xf2, 0xa7, 0x62, 0x1f, 0xd3, 0x30, 0x76, 0x1f, 0x66,
	0x33, 0x7f, 0xbe, 0x46, 0xf5, 0x20, 0x14, 0xfd, 0x61, 0xd7, 0xf6, 0x69, 0xa4, 0x3d, 0xd6, 0x3f,
	0x0d, 0xde, 0x7b, 0xeb, 0x64, 0xbd, 0x71, 0x59, 0xc0, 0x3d, 0x28, 0xf9, 0x9f, 0x65, 0xf4, 0xff,
	0xec, 0xef, 0x1b, 0x80, 0x1b, 0xed, 0xf6, 0xc9, 0x73, 0x1c, 0x32, 0xe3, 0x18, 0xee, 0xc8, 0xb9,
	0x08, 0xeb, 0xe0, 0x5e, 0x8f, 0x11, 0xce, 0xf5, 0x26, 0x6a, 0xb3, 0x14, 0xdd, 0x5d, 0xda, 0xc4,
	0x02, 0x60, 0x79, 0x65, 0x1d, 0x69, 0xa9, 0xc0, 0x82, 0x84, 0xcc, 0x49, 0xd6, 0x6e, 0x26, 0x21,
	0x2b, 0x24, 0x24, 0x27, 0xb1, 0xe1, 0xe6, 0xdc, 0x8c, 0x75, 0x59, 0x7d, 0x67, 0x96, 0xa2, 0x1d,
	0x55, 0xbd, 0xb0, 0x61, 0x23, 0xd2, 0x0e, 0x6c, 0xce, 0x4d, 0x7e, 0x0d, 0x37, 0xf5, 0x38, 0xdc,
	0x78, 0x0a, 0xff, 0x4b, 0xb2, 0x83, 0xde, 0xaf, 0x69, 0xdf, 0xf8, 0x67, 0xb4, 0x35, 0xde, 0xad,
	0xe8, 0x87, 0xb5, 0xad, 0x64, 0x64, 0xa9, 0xe5, 0x29, 0x8a, 0x85, 0x82, 0xdb, 0xbe, 0x9c, 0x98,
	0xe0, 0x6a, 0x62, 0x82, 0x9f, 0x13, 0x13, 0x5c, 0x4c, 0xcd, 0xd2, 0xd5, 0xd4, 0x2c, 0xfd, 0x98,
	0x9a, 0xa5, 0x57, 0x8d, 0x25, 0x77, 0xa4, 0x54, 0x23, 0x61, 0xf4, 0x0d, 0xf1, 0x85, 0xe3, 0x53,
	0x46, 0x9c, 0xf3, 0xf9, 0xb7, 0x42, 0x1a, 0xd5, 0xfd, 0x5f, 0x3e, 0xee, 0x47, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x18, 0xae, 0x3c, 0x27, 0x49, 0x04, 0x00, 0x00,
}

func (this *AuthorizationGrant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizationGrant)
	if !ok {
		that2, ok := that.(AuthorizationGrant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authorization.Equal(that1.Authorization) {
		return false
	}
	if !this.Expiration.Equal(that1.Expiration) {
		return false
	}
	return true
}
func (this *GenericAuthorization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenericAuthorization)
	if !ok {
		that2, ok := that.(GenericAuthorization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GrantMsgType != that1.GrantMsgType {
		return false
	}
	return true
}
func (this *SendAuthorization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendAuthorization)
	if !ok {
		that2, ok := that.(SendAuthorization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SpendLimit) != len(that1.SpendLimit) {
		return false
	}
	for i := range this.SpendLimit {
		if !this.SpendLimit[i].Equal(&that1.SpendLimit[i]) {
			return false
		}
	}
	return true
}
func (this *GGMPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GGMPair)
	if !ok {
		that2, ok := that.(GGMPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GranterAddress != that1.GranterAddress {
		return false
	}
	if this.GranteeAddress != that1.GranteeAddress {
		return false
	}
	if this.MsgType != that1.MsgType {
		return false
	}
	return true
}
func (this *GGMPairs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GGMPairs)
	if !ok {
		that2, ok := that.(GGMPairs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pairs) != len(that1.Pairs) {
		return false
	}
	for i := range this.Pairs {
		if !this.Pairs[i].Equal(&that1.Pairs[i]) {
			return false
		}
	}
	return true
}
func (m *AuthorizationGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizationGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizationGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMsgauth(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.Authorization != nil {
		{
			size, err := m.Authorization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgauth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenericAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GrantMsgType) > 0 {
		i -= len(m.GrantMsgType)
		copy(dAtA[i:], m.GrantMsgType)
		i = encodeVarintMsgauth(dAtA, i, uint64(len(m.GrantMsgType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpendLimit) > 0 {
		for iNdEx := len(m.SpendLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpendLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgauth(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GGMPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GGMPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GGMPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgType) > 0 {
		i -= len(m.MsgType)
		copy(dAtA[i:], m.MsgType)
		i = encodeVarintMsgauth(dAtA, i, uint64(len(m.MsgType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GranteeAddress) > 0 {
		i -= len(m.GranteeAddress)
		copy(dAtA[i:], m.GranteeAddress)
		i = encodeVarintMsgauth(dAtA, i, uint64(len(m.GranteeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GranterAddress) > 0 {
		i -= len(m.GranterAddress)
		copy(dAtA[i:], m.GranterAddress)
		i = encodeVarintMsgauth(dAtA, i, uint64(len(m.GranterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GGMPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GGMPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GGMPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgauth(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgauth(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgauth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthorizationGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authorization != nil {
		l = m.Authorization.Size()
		n += 1 + l + sovMsgauth(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration)
	n += 1 + l + sovMsgauth(uint64(l))
	return n
}

func (m *GenericAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GrantMsgType)
	if l > 0 {
		n += 1 + l + sovMsgauth(uint64(l))
	}
	return n
}

func (m *SendAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpendLimit) > 0 {
		for _, e := range m.SpendLimit {
			l = e.Size()
			n += 1 + l + sovMsgauth(uint64(l))
		}
	}
	return n
}

func (m *GGMPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GranterAddress)
	if l > 0 {
		n += 1 + l + sovMsgauth(uint64(l))
	}
	l = len(m.GranteeAddress)
	if l > 0 {
		n += 1 + l + sovMsgauth(uint64(l))
	}
	l = len(m.MsgType)
	if l > 0 {
		n += 1 + l + sovMsgauth(uint64(l))
	}
	return n
}

func (m *GGMPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovMsgauth(uint64(l))
		}
	}
	return n
}

func sovMsgauth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgauth(x uint64) (n int) {
	return sovMsgauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthorizationGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizationGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizationGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgauth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Authorization == nil {
				m.Authorization = &types.Any{}
			}
			if err := m.Authorization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgauth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantMsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantMsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgauth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendLimit = append(m.SpendLimit, types1.Coin{})
			if err := m.SpendLimit[len(m.SpendLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GGMPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GGMPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GGMPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GranterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GranterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GranteeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GranteeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GGMPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GGMPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GGMPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgauth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, GGMPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgauth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgauth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgauth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgauth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgauth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgauth = fmt.Errorf("proto: unexpected end of group")
)
